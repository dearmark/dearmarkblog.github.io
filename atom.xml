<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mark's note]]></title>
  <link href="http://dearmark.tk/atom.xml" rel="self"/>
  <link href="http://dearmark.tk/"/>
  <updated>2014-03-30T06:29:16+08:00</updated>
  <id>http://dearmark.tk/</id>
  <author>
    <name><![CDATA[Mark Weng]]></name>
    <email><![CDATA[treesea20@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sublime text 3快捷键]]></title>
    <link href="http://dearmark.tk/blog/2014/03/30/sublime-text3-memo/"/>
    <updated>2014-03-30T06:13:25+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/30/sublime-text3-memo</id>
    <content type="html"><![CDATA[<h2>选择类</h2>

<p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p>

<p>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</p>

<p>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和Shift+↓ 效果一样。</p>

<p>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</p>

<p>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</p>

<p>Ctrl+M 光标移动至括号内结束或开始的位置。</p>

<p>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</p>

<p>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</p>

<p>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</p>

<p>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</p>

<p>Ctrl+K+0 展开所有折叠代码。</p>

<p>Ctrl+← 向左单位性地移动光标，快速移动光标。</p>

<p>Ctrl+→ 向右单位性地移动光标，快速移动光标。</p>

<p>shift+↑ 向上选中多行。</p>

<p>shift+↓ 向下选中多行。</p>

<p>Shift+← 向左选中文本。</p>

<p>Shift+→ 向右选中文本。</p>

<p>Ctrl+Shift+← 向左单位性地选中文本。</p>

<p>Ctrl+Shift+→ 向右单位性地选中文本。</p>

<p>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</p>

<p>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</p>

<p>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</p>

<p>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</p>

<h2>编辑类</h2>

<p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</p>

<p>Ctrl+Shift+D 复制光标所在整行，插入到下一行。</p>

<p>Tab 向右缩进。</p>

<p>Shift+Tab 向左缩进。</p>

<p>Ctrl+K+K 从光标处开始删除代码至行尾。</p>

<p>Ctrl+Shift+K 删除整行。</p>

<p>Ctrl+/ 注释单行。</p>

<p>Ctrl+Shift+/ 注释多行。</p>

<p>Ctrl+K+U 转换大写。</p>

<p>Ctrl+K+L 转换小写。</p>

<p>Ctrl+Z 撤销。</p>

<p>Ctrl+Y 恢复撤销。</p>

<p>Ctrl+U 软撤销，感觉和Gtrl+Z一样。</p>

<p>Ctrl+F2 设置书签</p>

<p>Ctrl+T 左右字母互换。</p>

<p>F6 单词检测拼写</p>

<h2>搜索类</h2>

<p>Ctrl+F 打开底部搜索框，查找关键字。</p>

<p>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</p>

<p>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p>

<p>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</p>

<p>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</p>

<p>Ctrl+：打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</p>

<p>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p>

<p>Esc 退出光标多行选择，退出搜索框，命令框等。</p>

<h2>显示类</h2>

<p>Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。</p>

<p>Ctrl+PageDown 向左切换当前窗口的标签页。</p>

<p>Ctrl+PageUp 向右切换当前窗口的标签页。</p>

<p>Alt+Shift+1窗口分屏，恢复默认1屏（非小键盘的数字）</p>

<p>Alt+Shift+2 左右分屏-2列</p>

<p>Alt+Shift+3 左右分屏-3列</p>

<p>Alt+Shift+4 左右分屏-4列</p>

<p>Alt+Shift+5 等分4屏</p>

<p>Alt+Shift+8 垂直分屏-2屏</p>

<p>Alt+Shift+9 垂直分屏-3屏</p>

<p>Ctrl+K+B 开启/关闭侧边栏。</p>

<p>F11 全屏模式</p>

<p>Shift+F11 免打扰模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux备忘]]></title>
    <link href="http://dearmark.tk/blog/2014/03/30/linux%E5%A4%87%E5%BF%98/"/>
    <updated>2014-03-30T03:25:57+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/30/linux备忘</id>
    <content type="html"><![CDATA[<!--more-->


<h3>man page</h3>

<pre><code>按键  进行工作
空白键 向下翻一页
[Page Down] 向下翻一页
[Page Up]   向上翻一页
[Home]  去到第一页
[End]   去到最后一页
/string 向『下』搜寻 string 这个字串，如果要搜寻 vbird 的话，就输入 /vbird
?string 向『上』搜寻 string 这个字串
n, N    利用 / 或 ? 来搜寻字串时，可以用 n 来继续下一个搜寻 (不论是 / 或 ?) ，可以利用 N 来进行『反向』搜寻。举例来说，我以 /vbird 搜寻 vbird 字串， 那么可以 n 继续往下查询，用 N 往上查询。若以 ?vbird 向上查询 vbird 字串， 那我可以用 n 继续『向上』查询，用 N 反向查询。
q   结束这次的 man page
</code></pre>

<h3>info page</h3>

<pre><code>按键  进行工作
空白键 向下翻一页
[Page Down] 向下翻一页
[Page Up]   向上翻一页
[tab]   在 node 之间移动，有 node 的地方，通常会以 * 显示。
[Enter] 当游标在 node 上面时，按下 Enter 可以进入该 node 。
b   移动游标到该 info 画面当中的第一个 node 处
e   移动游标到该 info 画面当中的最后一个 node 处
n   前往下一个 info page 处
p   前往上一个 info page 处
u   向上移动一层
s(/)    在 info page 当中进行搜寻
h   显示求助选单
?   指令一览表
</code></pre>

<h3>cd</h3>

<pre><code>.         代表此层目录
..        代表上一层目录
-         代表前一个工作目录
~         代表『目前使用者身份』所在的家目录
~account  代表 account 这个使用者的家目录

pwd∶显示目前的目录
pwd [-P]
参数∶
-P  ∶显示出确实的路径，而非使用连结 (link) 路径。

mkdir [-mp] 目录名称
参数∶
-m ∶设定档案的权限喔！直接设定，不需要看预设权限 (umask) 的脸色～
-p ∶帮助你直接将所需要的目录递回建立起来！
mkdir -p test1/test2/test3/test4
# 加了这个 -p 的参数，可以自行帮您建立多层目录！
mkdir -m 711 test2

rmdir [-p] 目录名称
参数∶
-p ∶连同上层『空的』目录也一起删除
rmdir -p test1/test2/test3/test4
rm -rf test 
</code></pre>

<h3>环境变数 PATH</h3>

<pre><code>echo $PATH
PATH="$PATH":/root 直接将 /root 的路径加入 PATH 当中
</code></pre>

<h3>ls</h3>

<pre><code>ls -al ~  将家目录下的所有档案列出来(含属性与隐藏档)
ls -al --full-time  ~ 完整的呈现档案的修改时间 
</code></pre>

<h3>cp</h3>

<pre><code>cp ~/.bashrc bashrc
cp -i ~/.bashrc bashrc
=&gt;cp: overwrite `basrhc'? n
# 重复作两次动作，由于 /tmp 底下已经存在 bashrc 了，加上 -i 参数，
# 则在覆盖前会询问使用者是否确定！可以按下 n 或者 y 呢！
# 但是，反过来说，如果不想要询问时，则加上 -f 这个参数来强制直接覆盖！
cp /var/log/wtmp . &lt;==想要复制到目前的目录，最后的 . 不要忘
cp -a /var/log/wtmp wtmp_2 将档案的所有特性都一起复制过来,包括所属者，权限,建立的时间
若 ~/.bashrc 比 /tmp/bashrc 新才复制过来

cp -u ~/.bashrc /tmp/bashrc
# 这个 -u 的特性，是在目标档案与来源档案有差异时，才会复制的。
# 所以，比较常被用于『备份』的工作当中喔！ ^_^
将范例四造成的 bashrc_slink 复制成为 bashrc_slink_2

&gt;tmp cp bashrc_slink bashrc_slink_2
&gt;tmp ls -l bashrc_slink*
lrwxrwxrwx  1 root root   6 Jul 18 22:31 bashrc_slink -&gt; bashrc
-rw-r--r--  1 root root 395 Jul 18 22:48 bashrc_slink_2
# 这个例子也是很有趣喔！原本复制的是连结档，但是却将连结档的实际档案复制过来了
# 也就是说，如果没有加上任何参数时，复制的是原始档案，而非连结档的属性！
# 若要复制连结档的属性，就得要使用 -d 或者 -a 的参数了！

将家目录的 .bashrc 及 .bash_history 复制到 /tmp 底下
&gt;tmp cp ~/.bashrc ~/.bash_history /tmp
# 可以将多个资料一次复制到同一个目录去！
</code></pre>

<h3>rm</h3>

<pre><code>&gt; rm [-fir] 档案或目录
参数∶
-f  ∶就是 force 的意思，强制移除；
-i  ∶互动模式，在删除前会询问使用者是否动作
-r  ∶递回删除啊！最常用在目录的删除了
范例∶
范例一∶建立一档案后予以删除
&gt; cd /tmp
&gt;tmp cp ~/.bashrc bashrc
&gt;tmp rm -i bashrc
rm: remove regular file `bashrc'? y
# 如果加上 -i 的参数就会主动询问喔！那么如果不要询问呢？就加 -f 参数啊！

范例二∶删除一个不为空的目录
&gt;tmp mkdir test
&gt;tmp cp ~/.bashrc test/ &lt;== 将档案复制到此目录去，就不是空的目录了
&gt;tmp rmdir test
rmdir: `test': Directory not empty &lt;== 删不掉啊！因为这不是空的目录！
&gt;tmp rm -rf test

范例三∶删除一个带有 - 开头的档案
&gt;tmp ls *aa*
-rw-r--r--  1 root  root      0 Aug 22 10:52 -aaa-
&gt;tmp rm -aaa-
rm: invalid option -- a
Try `rm --help' for more information.  &lt;== 因为 "-" 是参数嘛！
&gt;tmp rm ./-aaa-
</code></pre>

<h3>mv</h3>

<pre><code>&gt; mv [-fiu] source destination
&gt; mv [options] source1 source2 source3 .... directory
参数∶
-f  ∶force 强制的意思，强制直接移动而不询问；
-i  ∶若目标档案 (destination) 已经存在时，就会询问是否覆盖！
-u  ∶若目标档案已经存在，且 source 比较新，才会更新 (update)
范例∶
范例一∶复制一档案，建立一目录，将档案移动到目录中
&gt; cd /tmp
&gt;tmp cp ~/.bashrc bashrc
&gt;tmp mkdir mvtest
&gt;tmp mv bashrc mvtest
# 将某个档案移动到某个目录去，就是这样做！

范例二∶将刚刚的目录名称更名为 mvtest2
&gt;tmp mv mvtest mvtest2 &lt;== 这样就更名了！简单～
# 其实在 Linux 底下还有个有趣的指令，名称为 rename ，
# 该指令则专职进行档案的更名呢！用途也是不少～可以参阅 man rename 喔！

范例三∶再建立两个档案，再全部移动到 /tmp/mvtest2 当中
&gt;tmp cp ~/.bashrc bashrc1
&gt;tmp cp ~/.bashrc bashrc2
&gt;tmp mv bashrc1 bashrc2 mvtest2
# 注意到这边，如果有多个来源档案或目录，则最后一个目标档一定是『目录！』
# 意思是说，将所有的资料移动到该目录的意思！
###取得路径的档案名称与目录名称
&gt; basename /etc/sysconfig/network
network  &lt;== 很简单！就取得最后的档名～
&gt; dirname /etc/sysconfig/network
/etc/sysconfig  &lt;== 取得的变成目录名了！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autojump备忘]]></title>
    <link href="http://dearmark.tk/blog/2014/03/30/autojump%E5%A4%87%E5%BF%98/"/>
    <updated>2014-03-30T03:06:10+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/30/autojump备忘</id>
    <content type="html"><![CDATA[<ul>
<li><p>Jump To A Directory That Contains <code>foo</code>:</p>

<pre><code>j foo
</code></pre></li>
<li><p>Jump To A Child Directory</p>

<p>Sometimes it&rsquo;s convenient to jump to a child directory
(sub-directory of current directory) rather than typing out the full
name.</p>

<pre><code>jc bar
</code></pre></li>
<li><p>Open File Manager To Directories (instead of jumping):</p>

<p>Instead of jumping to a directory, you can open a file explorer
window (Mac Finder, Windows Explorer, GNOME Nautilus, etc.) to the
directory instead.</p>

<pre><code>jo music
</code></pre>

<p>Opening a file manager to a child directory is also supported.</p>

<pre><code>jco images
</code></pre></li>
<li><p>Using Multiple Arguments:</p>

<p> Let&rsquo;s assume the following database:</p>

<pre><code> 30   /home/user/mail/inbox
 10   /home/user/work/inbox
</code></pre>

<p> <code>j in</code> would jump into /home/user/mail/inbox as the higher weighted
 entry. However you can pass multiple arguments to autojump to prefer
 a different entry. In the above example, <code>j w in</code> would then change
 directory to /home/user/work/inbox.</p></li>
</ul>


<p>For more options refer to help:</p>

<pre><code>autojump --help
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash command]]></title>
    <link href="http://dearmark.tk/blog/2014/03/22/bash-command/"/>
    <updated>2014-03-22T09:12:22+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/22/bash-command</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[config Fail2Ban]]></title>
    <link href="http://dearmark.tk/blog/2014/03/12/config-fail2ban/"/>
    <updated>2014-03-12T00:25:23+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/12/config-fail2ban</id>
    <content type="html"><![CDATA[<p>Fail2Ban 是一款用 Python 代码编写的入侵防御软件，它可以分析多种服务的日志文件 (例如 ssh apache postfix mysql 等) 来侦测可能的暴力攻击，并且自动创建防火墙 (例如 iptables) 规则来达到阻止攻击源访问的目的</p>

<!--more-->


<p>这里以 Debian 为例，仅考虑如何防御 ssh 攻击的情况 (例如: 多次用不存在的用户名创建 ssh 连接，多次使用不同密码尝试登陆某 ssh 账户)，安装配置步骤如下</p>

<p>1安装</p>

<pre><code>apt-get update
apt-get install fail2ban
</code></pre>

<ol>
<li><p>(从 jail.conf 模板) 创建配置文件 jail.local</p>

<p> cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</p></li>
<li><p>编辑配置文件</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano /etc/fail2ban/jail.local
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>主要可以考虑配置的几个地方</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'>ignoreip  白名单 IP 地址
</span><span class='line'>bantime 被禁时间长度 <span class="o">(</span>秒<span class="o">)</span>
</span><span class='line'>maxretry 多少次尝试攻击即可以考虑被禁止
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ssh<span class="o">]</span> 这个分支是默认开启的
</span><span class='line'><span class="nv">enabled</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">port</span>    <span class="o">=</span> ssh
</span><span class='line'><span class="nv">filter</span>  <span class="o">=</span> sshd
</span><span class='line'><span class="nv">logpath</span>  <span class="o">=</span> /var/log/auth.log
</span><span class='line'><span class="nv">maxretry</span> <span class="o">=</span> 6
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>重启 Fai2Ban 服务来应用新的配置</p>

<p> /etc/init.d/fail2ban restart</p></li>
<li><p>就这么简单，其他的功能可以在配置文件内自行发挥</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-get command]]></title>
    <link href="http://dearmark.tk/blog/2014/03/11/apt-get-command/"/>
    <updated>2014-03-11T20:32:30+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/11/apt-get-command</id>
    <content type="html"><![CDATA[<h3>apt-get命令</h3>

<!--more-->


<p>下面将要介绍的所有命令都需要sudo
使用时请将“packagename”和“string”替换成您想要安装或者查找的程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get update——在修改/etc/apt/sources.list或者/etc/apt/preferences之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。
</span><span class='line'>apt-get install packagename——安装一个新软件包（参见下文的aptitude）
</span><span class='line'>apt-get remove packagename——卸载一个已安装的软件包（保留配置文件）
</span><span class='line'>apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）
</span><span class='line'>dpkg --force-all --purge packagename 有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。
</span><span class='line'>apt-get autoclean apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件
</span><span class='line'>apt-get clean 这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。
</span><span class='line'>apt-get upgrade——更新所有已安装的软件包
</span><span class='line'>apt-get dist-upgrade——将系统升级到新版本
</span><span class='line'>apt-cache search string——在软件包列表中搜索字符串
</span><span class='line'>dpkg -l package-name-pattern——列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“*package-name-pattern*”。
</span><span class='line'>aptitude——详细查看已安装或可用的软件包。与apt-get类似，aptitude可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于aptitude比apt-get了解更多信息，可以说它更适合用来进行安装和卸载。
</span><span class='line'>apt-cache showpkg pkgs——显示软件包信息。
</span><span class='line'>apt-cache dumpavail——打印可用软件包列表。
</span><span class='line'>apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。
</span><span class='line'>apt-cache pkgnames——打印软件包列表中所有软件包的名称。
</span><span class='line'>dpkg -S file——这个文件属于哪个已安装软件包。
</span><span class='line'>dpkg -L package——列出软件包中的所有文件。
</span><span class='line'>apt-file search filename——查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。apt-file是一个独立的软件包。您必须先使用apt-get install来安装它，然后运行apt-file update。如果apt-file search filename输出的内容太多，您可以尝试使用apt-file search filename | GREP -w filename（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：apt-file search filename | grep /bin/（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。
</span></code></pre></td></tr></table></div></figure>


<p>＊ apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，您可以释放大量的磁盘空间。如果您的需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。大多数情况下您不会再用到这些.debs文件，因此如果您为磁盘空间不足而感到焦头烂额，这个办法也许值得一试。</p>

<h4>演示</h4>

<p>我的磁盘空间不够用了。我得把apt的缓存空间清空才行。</p>

<p>apt-get clean</p>

<p>额外的软件包</p>

<p>deborphan和debfoster工具可以找出已经安装在系统上的不会被用到的软件包。</p>

<h3>apt-get 命令 &ndash; 提高命令行方式下的工作效率</h3>

<p>您可以通过定义别名（alias）来提高这些命令的输入速度。例如，您可以在您的<em>~/.bashrc</em>文件中添加下列内容</p>

<pre><code>alias acs='apt-cache search'
alias AGU='sudo apt-get update'
alias agg='sudo apt-get upgrade'
alias agd='sudo apt-get dist-upgrade'
alias agi='sudo apt-get install'
alias agr='sudo apt-get remove'
</code></pre>

<p>或者使用前面介绍的aptitude命令，如“alias agi=&lsquo;sudo aptitude install&#8217;”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git命令]]></title>
    <link href="http://dearmark.tk/blog/2014/03/09/git-command/"/>
    <updated>2014-03-09T19:39:36+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/09/git-command</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Git配置</h2>

<pre><code>git config --global user.name "robbin"   
git config --global user.email "fankai@gmail.com"
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor "mate -w"    # 设置Editor使用textmate
git config -l  # 列举所有配置
</code></pre>

<p>用户的git配置文件<code>~/.gitconfig</code></p>

<h2>Git常用命令</h2>

<h3>查看、添加、提交、删除、找回，重置修改文件</h3>

<pre><code>git help &lt;command&gt;  # 显示command的help
git show            # 显示某次提交的内容
git show $id

git co  -- &lt;file&gt;   # 抛弃工作区修改
git co  .           # 抛弃工作区修改,相当于用暂存区的所有文件直接覆盖本地文件

git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区
git add .           # 将所有修改过的工作文件提交暂存区

git rm &lt;file&gt;       # 从版本库中删除文件
git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件

git reset &lt;file&gt;    # 从暂存区恢复到工作文件
git reset -- .      # 从暂存区恢复到工作文件
git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci &lt;file&gt;
git ci .
git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
git ci -am "some comments"
git ci --amend      # 修改最后一次提交记录

git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     # 恢复最后一次提交的状态
</code></pre>

<h3>查看文件diff</h3>

<pre><code>git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异
git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
</code></pre>

<h3>查看提交记录</h3>

<pre><code>git log
git log &lt;file&gt;      # 查看该文件每次提交记录
git log -p &lt;file&gt;   # 查看每次详细修改内容的diff
git log -p -2       # 查看最近两次详细修改内容的diff
git log --stat      # 查看提交统计信息
</code></pre>

<h3>tig</h3>

<p>Mac上可以使用tig代替diff和log，<code>brew install tig</code></p>

<h2>Git 本地分支管理</h2>

<h3>查看、切换、创建和删除分支</h3>

<pre><code>git br -r           # 查看远程分支
git br &lt;new_branch&gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支

git co &lt;branch&gt;     # 切换到某个分支
git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去
git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch

git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支

git br -d &lt;branch&gt;  # 删除某个分支
git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
</code></pre>

<h3>分支合并和rebase</h3>

<pre><code>git merge &lt;branch&gt;               # 将branch分支合并到当前分支
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：
git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;
</code></pre>

<h2>Git补丁管理(方便在多台机器上开发同步时用)</h2>

<pre><code>git diff &gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
</code></pre>

<h2>Git暂存管理</h2>

<pre><code>git stash                        # 暂存
git stash list                   # 列所有stash
git stash apply                  # 恢复暂存的内容
git stash drop                   # 删除暂存区
</code></pre>

<h2>Git远程分支管理</h2>

<pre><code>git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上

git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名
git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支
git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支
</code></pre>

<h2>Git远程仓库管理</h2>

<pre><code>git remote -v                    # 查看远程服务器地址和仓库名称
git remote show origin           # 查看远程服务器仓库状态
git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址
git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)
git remote rm &lt;repository&gt;       # 删除远程仓库
</code></pre>

<h3>创建远程仓库</h3>

<pre><code>git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上

mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址
git push -u origin master                                      # 客户端首次提交
git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
</code></pre>

<p>也可以命令设置跟踪远程库和本地库</p>

<pre><code>git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
</code></pre>

<h3>Git Blame</h3>

<p>如果你要查看文件的每个部分是谁修改的, 那么 git blame 就是不二选择. 只要运行&#8217;git blame [filename]&lsquo;, 你就会得到整个文件的每一行的详细修改信息:包括SHA串,日期和作者</p>

<pre><code>git blame sha1_file.c
</code></pre>

<p>可以用&#8221;-L&#8221;参数在命令(blame)中指定开始和结束行</p>

<pre><code>git blame -L 160,+10 sha1_file.c 
</code></pre>

<h3>Git清除未跟踪的文件</h3>

<pre><code>git clean -df 可帮你搞定一切。
git clean -dn  这个命令可以看看有哪此文件和目录会被删
git clean -f 只会删文件，不会删目录
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown 语法]]></title>
    <link href="http://dearmark.tk/blog/2014/03/09/markdown%E8%AF%AD%E6%B3%95/"/>
    <updated>2014-03-09T19:36:08+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/09/markdown语法</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install and Config Octopress]]></title>
    <link href="http://dearmark.tk/blog/2014/03/09/install-octopress/"/>
    <updated>2014-03-09T02:04:19+08:00</updated>
    <id>http://dearmark.tk/blog/2014/03/09/install-octopress</id>
    <content type="html"><![CDATA[<p><img src="http://dearmark.tk/images/logo.png" title="Logo" ></p>

<h2>Octepress装得差不多了，记录一些事情</h2>

<!--more-->


<ul>
<li><p>要在文章中上传图片，直接copy到/source/images目录下即可。在文章中用 <code>&lt;img src="http://dearmark.tk/images/pic_name.png" title="Caption" &gt;</code>来引用即可</p></li>
<li><p>在文章中插入代码，用<code>```[language] 这儿放你要插入的代码即可。```</code></p></li>
<li>在html中插入图片，如about me部分。<code>&lt;p&gt;&lt;img src="http://dearmark.tk/images/pic_name.png"&gt;&lt;/p&gt;</code></li>
<li>rake watch 检测文件变化，实时生成新内容</li>
<li>在定制文件<code>/source/_includes/custom/head.html</code>把google的自定义字体去掉</li>
<li>If you are working on a multi-author blog, you can add <code>author: Your Name</code> to the metadata for proper attribution on a post. If you are working on a draft, you can add <code>published: false</code> to prevent it from being posted when you generate your blog. <strong>If you set published: false, your posts will only be visible in preview mode.</strong></li>
<li>Commit</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy
</span><span class='line'>git commit -am "`date`" && git push origin source</span></code></pre></td></tr></table></div></figure>


<p><em>OR</em></p>

<figure class='code'><figcaption><span>micro script to simplify the publish process</span><a href='http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># push.sh : publish &amp; commit with a single command</span>
</span><span class='line'>git add <span class="nb">source</span>
</span><span class='line'>git commit -am <span class="s2">&quot;`date`&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>
</span><span class='line'>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
